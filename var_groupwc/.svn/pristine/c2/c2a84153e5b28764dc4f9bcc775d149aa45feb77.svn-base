<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.4.2_18) on Fri Nov 21 11:34:07 GMT 2008 -->
<TITLE>
DataIn
</TITLE>

<META NAME="keywords" CONTENT="eeml.DataIn class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="DataIn";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/DataIn.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../eeml/DataOut.html" title="class in eeml"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataIn.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_java.lang.Thread">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
eeml</FONT>
<BR>
Class DataIn</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by">java.lang.Thread
      <IMG SRC="../resources/inherit.gif" ALT="extended by"><B>eeml.DataIn</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Runnable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>DataIn</B><DT>extends java.lang.Thread</DL>

<P>
This is the class to use for receiving data from remote environments/applications.
 It is asynchronous which means that once a DataIn object is constructed it invokes
 an onReceiveEEML() method every time it receives data. You therefore must have a method
 void onReceiveEEML(DataIn d) in your application, and you would normally use
 the getValue() method to extract relevant data.  
 <pre>
 DataIn myDataIn = new DataIn(this,"http://remote_url/001.xml",5000);
 
 void onReceiveEEML(DataIn d){ 
 
    float myVariable = d.getValue(0); 
    float myVariable2 = d.getValue("tagName");
 
 }
 </pre>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_java.lang.Thread"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from class java.lang.Thread</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>MAX_PRIORITY, MIN_PRIORITY, NORM_PRIORITY</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../eeml/DataIn.html#DataIn(processing.core.PApplet, java.lang.String, int)">DataIn</A></B>(processing.core.PApplet&nbsp;parent_,
       java.lang.String&nbsp;url,
       int&nbsp;period)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This object is asynchronous which means that it is set up to make requests at a particular interval 
 (say once every five seconds, meaning period would be '5000').</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../eeml/DataIn.html#DataIn(processing.core.PApplet, java.lang.String, java.lang.String, int)">DataIn</A></B>(processing.core.PApplet&nbsp;parent_,
       java.lang.String&nbsp;url,
       java.lang.String&nbsp;key,
       int&nbsp;period)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Just like DataIn(PApplet parent_, String url, int period) but enables the setting of a header 
 to authenticate access to Pachube
  
 </TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#countDatastreams()">countDatastreams</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of data elements in the remote EEML.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getId(java.lang.String)">getId</A></B>(java.lang.String&nbsp;tag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of all the data stream ID's that are tagged with String tag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getMaximum(int)">getMaximum</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to determine the maximum value of a numeric data stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getMinimum(int)">getMinimum</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to determine the minimum value of a numeric data stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getStatus()">getStatus</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to determine the status of an EEML feed ("live", "frozen" or "no status")/</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getStringValue(int)">getStringValue</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the string value of the remote data feed identified through its id number (useful 
 when a stream's value is a string).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getStringValue(java.lang.String)">getStringValue</A></B>(java.lang.String&nbsp;tag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the string value of the remote data feed identified through its tag (useful 
 when a stream's value is a string).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getTag(int)">getTag</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the tags for a specific data stream id.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getUnits(int)">getUnits</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to determine the units of a data stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getURL()">getURL</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the URL requested by this object (useful in the onReceiveEEML method to determine
 which particular DataIn object's request has been received).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getValue(int)">getValue</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value of the remote data feed identified through its id number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#getValue(java.lang.String)">getValue</A></B>(java.lang.String&nbsp;tag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value of a remote data feed identified through its tag -- if there are several streams
 with the same tag, then only the first identified is returned.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#printXML()">printXML</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Useful for debugging; returns the entire EEML document received.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#quit()">quit</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ignore.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../eeml/DataIn.html#run()">run</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ignore -- this is where the threads are created.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Thread"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Thread</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>activeCount, checkAccess, countStackFrames, currentThread, destroy, dumpStack, enumerate, getContextClassLoader, getName, getPriority, getThreadGroup, holdsLock, interrupt, interrupted, isAlive, isDaemon, isInterrupted, join, join, join, resume, setContextClassLoader, setDaemon, setName, setPriority, sleep, sleep, start, stop, stop, suspend, toString, yield</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="DataIn(processing.core.PApplet, java.lang.String, int)"><!-- --></A><H3>
DataIn</H3>
<PRE>
public <B>DataIn</B>(processing.core.PApplet&nbsp;parent_,
              java.lang.String&nbsp;url,
              int&nbsp;period)</PRE>
<DL>
<DD>This object is asynchronous which means that it is set up to make requests at a particular interval 
 (say once every five seconds, meaning period would be '5000'). When the object receives 
 a response from the remote server, it invokes the onReceiveEEML() method in your application
 where you can read the data for particular variables by using the getValue() method.
 
 <pre>DataIn d = new DataIn(this,"http://remoteurl/001.xml",5000);</pre>
<P>
<DT><B>Parameters:</B><DD><CODE>url</CODE> - the URL to connect to<DD><CODE>period</CODE> - the number of milliseconds between requests to the remote feed.<DT><B>See Also:</B><DD><A HREF="../eeml/DataIn.html#getValue(java.lang.String)"><CODE>getValue(String tag)</CODE></A>, 
<A HREF="../eeml/DataIn.html#getValue(int)"><CODE>getValue(int id)</CODE></A>, 
<A HREF="../eeml/DataIn.html#DataIn(processing.core.PApplet, java.lang.String, java.lang.String, int)"><CODE>DataIn(PApplet parent_, String url, String key, int period)</CODE></A></DL>
<HR>

<A NAME="DataIn(processing.core.PApplet, java.lang.String, java.lang.String, int)"><!-- --></A><H3>
DataIn</H3>
<PRE>
public <B>DataIn</B>(processing.core.PApplet&nbsp;parent_,
              java.lang.String&nbsp;url,
              java.lang.String&nbsp;key,
              int&nbsp;period)</PRE>
<DL>
<DD>Just like DataIn(PApplet parent_, String url, int period) but enables the setting of a header 
 to authenticate access to Pachube
  
 <pre>DataIn d = new DataIn(this,"http://pachube.com/api/001.xml", "YourKeyGoesHere", 5000);</pre>
<P>
<DT><B>Parameters:</B><DD><CODE>url</CODE> - the URL to connect to<DD><CODE>key</CODE> - the Pachube API key used to access Pachube feeds (requires registration at pachube.com)<DD><CODE>period</CODE> - the number of milliseconds between requests to the remote feed.<DT><B>See Also:</B><DD><A HREF="../eeml/DataIn.html#getValue(java.lang.String)"><CODE>getValue(String tag)</CODE></A>, 
<A HREF="../eeml/DataIn.html#getValue(int)"><CODE>getValue(int id)</CODE></A></DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getValue(int)"><!-- --></A><H3>
getValue</H3>
<PRE>
public float <B>getValue</B>(int&nbsp;id)</PRE>
<DL>
<DD>Returns the value of the remote data feed identified through its id number.
 <pre>d.getValue(2);</pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>id</CODE> - 
<DT><B>Returns:</B><DD>value</DL>
</DD>
</DL>
<HR>

<A NAME="getValue(java.lang.String)"><!-- --></A><H3>
getValue</H3>
<PRE>
public float <B>getValue</B>(java.lang.String&nbsp;tag)</PRE>
<DL>
<DD>Returns the value of a remote data feed identified through its tag -- if there are several streams
 with the same tag, then only the first identified is returned. (Use "getId" to retrieve an array
 containing the IDs of all the streams that contain a particular tag).
 <pre>d.getValue("usefulTag");</pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tag</CODE> - 
<DT><B>Returns:</B><DD><DT><B>See Also:</B><DD><A HREF="../eeml/DataIn.html#getId(java.lang.String)"><CODE>getId(String tag)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getStringValue(int)"><!-- --></A><H3>
getStringValue</H3>
<PRE>
public java.lang.String <B>getStringValue</B>(int&nbsp;id)</PRE>
<DL>
<DD>Returns the string value of the remote data feed identified through its id number (useful 
 when a stream's value is a string).
 <pre>String avatarName = d.getStringValue(4);</pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>id</CODE> - 
<DT><B>Returns:</B><DD><DT><B>See Also:</B><DD><A HREF="../eeml/DataIn.html#getValue(int)"><CODE>getValue(int id)</CODE></A>, 
<A HREF="../eeml/DataIn.html#getStringValue(java.lang.String)"><CODE>getStringValue(String tag)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getStringValue(java.lang.String)"><!-- --></A><H3>
getStringValue</H3>
<PRE>
public java.lang.String <B>getStringValue</B>(java.lang.String&nbsp;tag)</PRE>
<DL>
<DD>Returns the string value of the remote data feed identified through its tag (useful 
 when a stream's value is a string).
 <pre>String avatarName = d.getStringValue("avatarName");</pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tag</CODE> - 
<DT><B>Returns:</B><DD><DT><B>See Also:</B><DD><A HREF="../eeml/DataIn.html#getValue(int)"><CODE>getValue(int id)</CODE></A>, 
<A HREF="../eeml/DataIn.html#getStringValue(java.lang.String)"><CODE>getStringValue(String tag)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getTag(int)"><!-- --></A><H3>
getTag</H3>
<PRE>
public java.lang.String <B>getTag</B>(int&nbsp;id)</PRE>
<DL>
<DD>Returns the tags for a specific data stream id.
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="getId(java.lang.String)"><!-- --></A><H3>
getId</H3>
<PRE>
public int[] <B>getId</B>(java.lang.String&nbsp;tag)</PRE>
<DL>
<DD>Returns an array of all the data stream ID's that are tagged with String tag.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tag</CODE> - 
<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="countDatastreams()"><!-- --></A><H3>
countDatastreams</H3>
<PRE>
public int <B>countDatastreams</B>()</PRE>
<DL>
<DD>Returns the number of data elements in the remote EEML.
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="printXML()"><!-- --></A><H3>
printXML</H3>
<PRE>
public void <B>printXML</B>()</PRE>
<DL>
<DD>Useful for debugging; returns the entire EEML document received.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getURL()"><!-- --></A><H3>
getURL</H3>
<PRE>
public java.lang.String <B>getURL</B>()</PRE>
<DL>
<DD>Returns the URL requested by this object (useful in the onReceiveEEML method to determine
 which particular DataIn object's request has been received).
 <pre>if (thisD.getURL().equals(thatD.getURL()){
    doSomething(); // we know which feed's EEML we have just received
 }
 </pre>@return
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="run()"><!-- --></A><H3>
run</H3>
<PRE>
public void <B>run</B>()</PRE>
<DL>
<DD>Ignore -- this is where the threads are created.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getStatus()"><!-- --></A><H3>
getStatus</H3>
<PRE>
public java.lang.String <B>getStatus</B>()</PRE>
<DL>
<DD>Used to determine the status of an EEML feed ("live", "frozen" or "no status")/
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="getMaximum(int)"><!-- --></A><H3>
getMaximum</H3>
<PRE>
public float <B>getMaximum</B>(int&nbsp;id)</PRE>
<DL>
<DD>Used to determine the maximum value of a numeric data stream.
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="getMinimum(int)"><!-- --></A><H3>
getMinimum</H3>
<PRE>
public float <B>getMinimum</B>(int&nbsp;id)</PRE>
<DL>
<DD>Used to determine the minimum value of a numeric data stream.
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="getUnits(int)"><!-- --></A><H3>
getUnits</H3>
<PRE>
public java.lang.String[] <B>getUnits</B>(int&nbsp;id)</PRE>
<DL>
<DD>Used to determine the units of a data stream. Returns an array, e.g.
 <pre>
 { "Celsius","C","basicSI" }
 </pre>
<P>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="quit()"><!-- --></A><H3>
quit</H3>
<PRE>
public void <B>quit</B>()</PRE>
<DL>
<DD>Ignore.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/DataIn.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../eeml/DataOut.html" title="class in eeml"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataIn.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_java.lang.Thread">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
